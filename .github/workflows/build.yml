name: Build Clone Website to Docker Tool Multi-Platform

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS-ARM
          - os: macos-13
            platform: macOS-Intel
          - os: ubuntu-latest
            platform: Linux

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow

      # Cross-platform icon generation
      - name: Generate Icons
        run: |
          echo "from PIL import Image" > make_icons.py
          echo "import os, sys" >> make_icons.py
          echo "os.makedirs('images', exist_ok=True)" >> make_icons.py
          echo "img_path = 'images/icon.png'" >> make_icons.py
          echo "ico_path = 'icon.ico'" >> make_icons.py
          echo "try:" >> make_icons.py
          echo "    img = Image.open(img_path)" >> make_icons.py
          echo "except:" >> make_icons.py
          echo "    img = Image.new('RGBA', (512, 512), (0, 122, 204, 255))" >> make_icons.py
          echo "img.save(ico_path, format='ICO', sizes=[(16,16),(32,32),(64,64),(128,128),(256,256),(512,512)])" >> make_icons.py
          echo "if sys.platform == 'darwin':" >> make_icons.py
          echo "    icns_path = 'icon.icns'" >> make_icons.py
          echo "    iconset = 'images/iconset'" >> make_icons.py
          echo "    os.makedirs(iconset, exist_ok=True)" >> make_icons.py
          echo "    for size in [16,32,64,128,256,512,1024]:" >> make_icons.py
          echo "        resized = img.resize((size, size))" >> make_icons.py
          echo "        resized.save(f'{iconset}/icon_{size}x{size}.png')" >> make_icons.py
          echo "    os.system(f'iconutil -c icns {iconset} -o {icns_path}')" >> make_icons.py
          python make_icons.py

      - name: Build Executable
        run: pyinstaller cw2dt.spec

      - name: Package Executable (Windows)
        if: matrix.platform == 'Windows'
        run: tar -czvf CW2DT-Windows.tar.gz dist/cw2dt.exe

      - name: Package Executable (Linux/macOS)
        if: matrix.platform != 'Windows'
        run: tar -czvf CW2DT-${{ matrix.platform }}.tar.gz dist/cw2dt*

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CW2DT-${{ matrix.platform }}
          path: CW2DT-${{ matrix.platform }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: CW2DT-Windows
      - uses: actions/download-artifact@v4
        with:
          name: CW2DT-macOS-Intel
      - uses: actions/download-artifact@v4
        with:
          name: CW2DT-macOS-ARM
      - uses: actions/download-artifact@v4
        with:
          name: CW2DT-Linux

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            CW2DT-Windows.tar.gz
            CW2DT-macOS-Intel.tar.gz
            CW2DT-macOS-ARM.tar.gz
            CW2DT-Linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
