name: Build Clone Website to Docker Tool (Multi-Platform)

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS-ARM
          - os: macos-13
            platform: macOS-Intel
          - os: ubuntu-latest
            platform: Linux

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install OS deps (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2

      - name: Install Python packages
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pyinstaller pillow requests beautifulsoup4 lxml PySide6

      - name: Ensure project directories
        shell: bash
        run: mkdir -p Clone-Website-to-Docker-Tool/images

      - name: Write PyInstaller spec
        shell: bash
        run: |
          cat > cw2dt.spec << 'PYZSPEC'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          from PyInstaller.utils.hooks import collect_submodules

          def existing(path): 
              return path if os.path.exists(path) else None

          image_files = []
          for fn in [
              "Clone-Website-to-Docker-Tool/images/arrow_right.png",
              "Clone-Website-to-Docker-Tool/images/docker_logo.png",
              "Clone-Website-to-Docker-Tool/images/icon.png",
              "Clone-Website-to-Docker-Tool/images/web_logo.png"
          ]:
              if os.path.exists(fn):
                  image_files.append((fn, "images"))

          datas = []
          if existing("Clone-Website-to-Docker-Tool/VERSION.txt"):
              datas.append(("Clone-Website-to-Docker-Tool/VERSION.txt", "."))

          datas += image_files

          hidden = (
              collect_submodules("PySide6.QtCore") +
              collect_submodules("PySide6.QtGui") +
              collect_submodules("PySide6.QtWidgets")
          )

          a = Analysis(
              ["cw2dt.py"],
              pathex=[],
              binaries=[],
              datas=datas,
              hiddenimports=hidden,
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              noarchive=False,
              optimize=0,
          )
          pyz = PYZ(a.pure)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.datas,
              [],
              name="cw2dt",
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,  # Disabled for Windows stability
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
              icon=("Clone-Website-to-Docker-Tool/icon.ico" if os.name == "nt" else ("Clone-Website-to-Docker-Tool/icon.icns" if os.path.exists("Clone-Website-to-Docker-Tool/icon.icns") else None)),
          )
          PYZSPEC

      - name: Build executable/bundle
        shell: bash
        run: pyinstaller --noconfirm cw2dt.spec

      # Packaging steps with fallback + debugging
      - name: Package Windows
        if: matrix.platform == 'Windows'
        shell: bash
        run: |
          cd dist
          echo "Contents of dist/ directory before packaging:"
          ls -al
          if [ -f cw2dt.exe ]; then
            zip -j ../CW2DT-Windows.zip cw2dt.exe ../Clone-Website-to-Docker-Tool/icon.ico 2>/dev/null || zip -j ../CW2DT-Windows.zip cw2dt.exe
          else
            echo "ERROR: Windows executable not found in dist/ after build!"
            exit 1
          fi

      - name: Package Linux
        if: matrix.platform == 'Linux'
        shell: bash
        run: |
          cd dist
          if [ -f cw2dt ]; then
            chmod +x cw2dt
            zip -j ../CW2DT-Linux.zip cw2dt ../Clone-Website-to-Docker-Tool/icon.icns 2>/dev/null || zip -j ../CW2DT-Linux.zip cw2dt
          else
            echo "ERROR: Linux binary not found!"
            exit 1
          fi

      - name: Package macOS
        if: startsWith(matrix.platform, 'macOS')
        shell: bash
        run: |
          cd dist
          if [ -d cw2dt.app ]; then
            ditto -c -k --sequesterRsrc --keepParent cw2dt.app ../CW2DT-${{ matrix.platform }}.zip
          elif [ -f cw2dt ]; then
            zip -j ../CW2DT-${{ matrix.platform }}.zip cw2dt ../Clone-Website-to-Docker-Tool/icon.icns 2>/dev/null || zip -j ../CW2DT-${{ matrix.platform }}.zip cw2dt
          else
            echo "ERROR: macOS app or binary not found!"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: CW2DT-${{ matrix.platform }}
          path: CW2DT-${{ matrix.platform }}.zip
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: CW2DT-*
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            CW2DT-Windows.zip
            CW2DT-macOS-Intel.zip
            CW2DT-macOS-ARM.zip
            CW2DT-Linux.zip
